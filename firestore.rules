rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User preferences subcollection
      match /preferences/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User activity logs - read only for user, write for system
      match /activity/{document} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && 
                        request.auth.token.role in ['admin', 'system'];
      }
    }
    
    // Public medical data - read only for authenticated users
    match /drugs/{drugId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'moderator'];
      
      // Drug reviews - separate collection for better performance
    match /drug_reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null && 
                       request.resource.data.user_id == request.auth.uid &&
                       hasValidReviewData();
      allow update: if request.auth != null && 
                       resource.data.user_id == request.auth.uid &&
                       hasValidReviewData();
      allow delete: if request.auth != null && 
                       (resource.data.user_id == request.auth.uid ||
                        request.auth.token.role in ['admin', 'moderator']);
    }
    }
    
    // Diagnoses data - read only for authenticated users
    match /diagnoses/{diagnosisId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'moderator'];
    }
    
    // Medical codes - read only for authenticated users
    match /medical_codes/{codeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'moderator'];
    }
    
    // Specialties - read only for authenticated users
    match /specialties/{specialtyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'moderator'];
    }
    
    // User search history - private to user
    match /search_history/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /searches/{searchId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // User bookmarks - private to user
    match /user_bookmarks/{bookmarkId} {
      allow read, write: if request.auth != null && 
                           request.resource.data.user_id == request.auth.uid;
      allow delete: if request.auth != null && 
                      resource.data.user_id == request.auth.uid;
    }
    
    // User preferences - private to user
    match /user_preferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User activities - read-only for users, write for system
    match /user_activities/{activityId} {
      allow read: if request.auth != null && 
                    resource.data.user_id == request.auth.uid;
      allow create: if request.auth != null; // System creates these
    }
    
    // Notifications - private to user
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                    resource.data.user_id == request.auth.uid;
      allow update: if request.auth != null && 
                      resource.data.user_id == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'read_at']);
      allow create: if request.auth != null; // System creates notifications
    }
    
    // System configuration - admin only
    match /system/{document} {
      allow read: if request.auth != null && 
                     request.auth.token.role in ['admin'];
      allow write: if request.auth != null && 
                      request.auth.token.role == 'admin';
    }
    
    // Analytics and metrics - admin only
    match /analytics/{document} {
      allow read: if request.auth != null && 
                     request.auth.token.role in ['admin'];
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'system'];
    }
    
    // Error logs - system write, admin read
    match /error_logs/{document} {
      allow read: if request.auth != null && 
                     request.auth.token.role in ['admin'];
      allow write: if request.auth != null && 
                      request.auth.token.role in ['admin', 'system'];
    }
    
    // Rate limiting data - system only
    match /rate_limits/{document} {
      allow read, write: if request.auth != null && 
                           request.auth.token.role == 'system';
    }
  }
}

// Helper functions for validation
function isValidUser(userId) {
  return request.auth != null && request.auth.uid == userId;
}

function isAdmin() {
  return request.auth != null && request.auth.token.role == 'admin';
}

function isModerator() {
  return request.auth != null && 
         request.auth.token.role in ['admin', 'moderator'];
}

function isSystem() {
  return request.auth != null && request.auth.token.role == 'system';
}

function isValidEmail(email) {
  return email.matches('.*@.*\\..*');
}

function isValidTimestamp(timestamp) {
  return timestamp is timestamp;
}

function hasValidReviewData() {
  return request.resource.data.keys().hasAll(['drug_id', 'rating', 'review_text', 'user_id']) &&
         request.resource.data.drug_id is string &&
         request.resource.data.drug_id.size() > 0 &&
         request.resource.data.rating is number &&
         request.resource.data.rating >= 1 &&
         request.resource.data.rating <= 5 &&
         request.resource.data.review_text is string &&
         request.resource.data.review_text.size() >= 10 &&
         request.resource.data.review_text.size() <= 2000 &&
         request.resource.data.user_id == request.auth.uid;
}

function hasValidUserData() {
  return request.resource.data.keys().hasAll(['email', 'displayName']) &&
         isValidEmail(request.resource.data.email) &&
         request.resource.data.displayName is string &&
         request.resource.data.displayName.size() > 0;
}